# -*- coding: utf-8 -*-
"""202344006_송윤빈_최종.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s1up3VBAsDp0Pm2iMH2y5bfvRiJh1y_U
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers import Activation, Dropout
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
import numpy as np
import cv2
import os
import random
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelBinarizer
from keras.utils import to_categorical
from imutils import paths
from sklearn.model_selection import train_test_split

dir_path = '/content/drive/MyDrive/newdataset'
categories = ['crack', 'empty', 'good']
data = []

for i in categories:

    paths = os.path.join(dir_path,i)
    print('paths',paths)
    ii=0
    for j in os.listdir(paths):
        img_path = os.path.join(paths,j)
        labels = categories.index(i)

        if (os.path.splitext(img_path)[1]=='.jpg'):
          img = cv2.imread(img_path)
          img = cv2.resize(img,(40,40))
          data.append([img,labels])


random.shuffle(data)
print(len(data))

x = []
y = []

for features,label in data:
    x.append(features)
    y.append(label)

#Converting lists into numpy arrays
x = np.array(x)
y = np.array(y)
x = x/255.0
x = np.array(x).reshape(-1, 40, 40, 3)
print("Shape of train images is:", x.shape)
print("Shape of labels is:", y.shape)
print(y)
print(x.shape[1:])

model = Sequential()
model.add(Conv2D(64,(3,3), activation='relu', input_shape = (x.shape[1:])))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(128,(2,2), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(256,(3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.5))
model.add(Flatten())

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(3,activation='softmax'))
model.summary()

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x, y, epochs=100,batch_size=100,validation_split=0.2)

import numpy as np


def image(path):
    print('path',path)
    img = cv2.imread(path)

    new_arr = cv2.resize(img, (40, 40))
    new_arr = np.array(new_arr)
    new_arr = new_arr/255.0
    new_arr = new_arr.reshape(-1, 40, 40, 3)

    return new_arr

dir_path = '/content/drive/MyDrive/newdataset'
categories = ['test_crack','test_empty','test_good']
data = []

correct_cnt=0
for i in categories:

    paths = os.path.join(dir_path,i)
    ii=0
    for j in os.listdir(paths):
        img_path = os.path.join(paths,j)
      #  print(img_path)
        labels = categories.index(i)
      #  print(img_path,labels)
        prediction = model.predict(image(img_path))
        print('labels' ,labels)
        print('classification results' ,prediction.argmax())
        if (labels==prediction.argmax()):
            correct_cnt=correct_cnt+1
print('### correnct cnt out of 27==>',correct_cnt)